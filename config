# put timestamps on the history command
export HISTTIMEFORMAT='%F %T '

export BRANCH_DIR='main/core'
export IDE='intellij'
#export IDE='eclipse'

function resetIde {
  export IDE='intellij'
}

function setIde {
  export IDE=$1
}

alias bltdir='cd ~/blt/app/${BRANCH_DIR}'
alias bltsync='blt --sync'
alias bltidea='bltdir; blt --intellij'
alias blteclipse='bltdir; blt --eclipse'
alias bltdb='bltdir; blt --build post --db-start --build plsql'
alias bltstart='bltdir; blt --start'

function resetBranchDir {
  export BRANCH_DIR='main/core'
}

function setBranchDir {
  export BRANCH_DIR=$1
}

function bltide {
  grepCount=$(ps -aef | grep -c bltsync);
  if [ ${grepCount} -ge 2 ]; then
   echo "A sync is currently in progress, NOT opening Eclipse/IntelliJ."
    return 1
  fi
 
  if [ $IDE == "intellij" ]; then
    grepCount=$(ps -aef | grep -c idea.sh);
  elif [ $IDE == "eclipse" ]; then
    grepCount=$(ps -aef | grep -c eclipse.sh);
  else
    echo "Invalid IDE detected, exiting."
    exit 1
  fi

  count=0
  sleepDur=2 # sleep duration (seconds)
  isDone=0 # change to 1 if we succeed (don't find eclipse AND IntelliJ running)
  while [ $count -lt 10 ] && [ $isDone -ne 1 ]; do
    if [ $grepCount -ge 2 ]; then
      echo "IDE is already open, sleeping for ${sleepDur} seconds before rechecking."
      sleep $sleepDur
      count=$((count+1))
    else
      isDone=1
    fi
  done

  if [ $isDone -eq 0 ]; then
    echo "IDE is already open. Please close it before attempting to run blte/blti (blt --eclipse, or blt --intellij)."
    return 1
  fi

  if [ $IDE == "intellij" ]; then
    bltidea
  elif [ $IDE == "eclipse" ]; then
    blteclipse
  else
    echo "Invalid IDE detected, exiting."
    exit 1
  fi
}

function sync {
  grepCount=$(ps -aef | grep -c bltsync);
  if [ ${grepCount} -ge 2 ]; then
    echo "Sync is already in progress, aborting."
    return 1
  else
    echo "Sync doesn't appear to be running, checking if IDE is open."
    if [ $IDE == "intellij" ]; then
      grepCount=$(ps -aef | grep -c idea.sh);
    elif [ $IDE == "eclipse" ]; then
      grepCount=$(ps -aef | grep -c eclipse.sh);
    else
      echo "Invalid IDE detected, exiting."
      exit 1
    fi

    if [ ${grepCount} -ge 2 ]; then
      echo "IDE is still running; please close it before syncing."
      return 1
    else
      echo "IDE wasn't running. Time to sync with blt; this may take a while."
      bltsync
    fi
  fi
}

alias all='sync --build && idea'
#alias bltbuild='blt --build' ## DO NOT run while in eclipse
alias bltupdate='blt --update-blt --setup --config force'
#alias bltclean='blt --clean-all force --status --sync --build'
alias updaterepo='cd ~/blt/app/${BRANCH_DIR}/build; blt --build update-repository-filter'

alias dupes='cd ~/blt/app/${BRANCH_DIR}/build; ./ant dupe-class-finder'

alias gs='git status'
function gbn() {
  git branch $1
  git checkout $1
}
alias gb='git branch'
alias gc='git checkout'
alias gd='git diff'

function gpo() {
  confirmArg=$1
  if [ "$confirmArg" == "-y" ]; then 
    branchName=$(gb | grep "* " | cut -d'*' -f2)
    echo "Pushing changes to GitHub under branch: $branchName"
    git push origin $branchName
  elif [ "$confirmArg" != "-y" ]; then
    echo "You must add -y to the gpo command in order to push changes automatically."
  fi
}

alias core='cd ~/blt/app/main/core'

docker-ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}

alias visualvm='~/visualvm_138/bin/visualvm'

function localprecheckin(){
  changeList=$1
  submitCL=$2
  if [ -z "$changeList" ]; then
    echo "A changelist # must be specified as the first argument"
  else
    if [ "$submitCL" == "-y" ]; then
      echo "Running local precheckin (with submit) for CL#$changeList"
      blt --submit $changeList local
    else
      echo "Running local precheckin (no submit) for CL#$changeList"
      blt --submit $changeList local nosubmit
    fi
  fi
}

alias runselectedftest='cd ~/blt/app/main/core/build; blt --build remote.miniftest -DdoSubmit=false -Dchange=$1';

function autobuild() {
  changeList=$1
  if [ -z "$changeList" ]; then
    echo "A changelist # must be specified as the first argument"
  else
    echo "Running remote ftest for CL#$changeList"
    runselectedftest
  fi
}
